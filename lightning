#!/bin/bash

###############################################################################################
##                                                                                           ##
##                       Universidad Carlos III de Madrid (UC3M)                             ##
##                                                                                           ##
##    Lightning - The simple and lightweight network simulator based on Docker containers    ##
##                                                                                           ##
##    author:         Pablo Toribio (under supervision of professor C.J. Bernardos Cano)     ##
##                                                                                           ##
##    project site:   https://github.com/ptoribi/lightning                                   ##
##                                                                                           ##
##    file description:  main program file -> displays menu, starts selected scenario,       ##
##                       stops already launched scenario or purges the system                ##       
##                                                                                           ##
##    usage:             not to be used directly, but summoned by "lightning-launcher" file  ##
##                                                                                           ##
###############################################################################################

#echo "lightning --> logname: $(logname)"
#echo "lightning --> whoami:  $(whoami)"

# ptoribi: "which" will find in the path the full location of the executable, "readlink -f" will resolve all possible symbolic links and "dirname" will remove the last component (file name).
LIGHTNING_INSTALLATION_PATH=$(dirname $(readlink -f $(which lightning)))
source $LIGHTNING_INSTALLATION_PATH/functions
source $LIGHTNING_INSTALLATION_PATH/personalized_functions

#echo $USER_BEHIND_SUDO:$GROUP_OF_USER_BEHIND_SUDO is executing Lightning, please enjoy!

# ptoribi: create folder for storing the logs
mkdir -p $LOGS_LOCATION

if [ "$#" -eq 0 ]
then
  # Display header showing version number
  version_header
  # Display usage message
  usage_message
else
  # Stop
  if [ "$#" -eq 1 ] && [ $1 == "stop" ]
  then
    lightning_stop
    # ptoribi: I remove the root from the list of local users allowed to make connections to the X server
    xhost -SI:localuser:root >> /dev/null
  # Purge
  elif [ "$#" -eq 1 ] && [ $1 == "purge" ]
  then
    lightning_purge
  # Start
  elif [ "$#" -eq 2 ] && [ $1 == "start" ]
  then
    if [[ -e $CONTAINERS_CREATED_FILE || -e $NETWORKS_CREATED_FILE ]] && [[ -e $SCENARIOS_PATH/$2 || -e $SCENARIOS_PATH/$2.xml || -e $SCENARIOS_PATH_LOCAL/$2 || -e $SCENARIOS_PATH_LOCAL/$2.xml ]]
    then
      error_message "Another user was running lightning or it wasn't properly closed the last time it was executed"
      information_message "Purging the system..."
      lightning_purge
      if [ $? == 0 ]
      then
        information_message "Launching selected scenario..."
      fi
    fi
    # ptoribi: execute scenario and show related .pdf file if present in "scenarios"
    if [[ -e $SCENARIOS_PATH/$2 || -e $SCENARIOS_PATH/$2.xml ]]
    then

      # ptoribi: I add the root to the list of local users allowed to make connections to the X server
      xhost +SI:localuser:root >> /dev/null
    
      if [ -e $SCENARIOS_PATH/$2.pdf ]
      then
        evince $SCENARIOS_PATH/$2.pdf 2>/dev/null &
      fi
      
      if [ -e $SCENARIOS_PATH/$2.xml ]
      then
        # --- LAUNCHING SELECTED SCENARIO, XML PARSING ---
        # ptoribi: time will measure how much time takes the commmand to complete
        time read_xml $SCENARIOS_PATH/$2.xml
        echo ""
      else
        # --- LAUNCHING SELECTED SCENARIO, DIRECT FUNCTIONS EXECUTION ---
        # ptoribi: time will measure how much time the commmand takes to complete
        time $SCENARIOS_PATH/$2
        echo ""
      fi
      
    # ptoribi: execute scenario and show related .pdf file if present in "scenarios-local"
    elif [[ -e $SCENARIOS_PATH_LOCAL/$2 || -e $SCENARIOS_PATH_LOCAL/$2.xml ]]
    then

      # ptoribi: I add the root to the list of local users allowed to make connections to the X server
      xhost +SI:localuser:root >> /dev/null

      if [ -e $SCENARIOS_PATH_LOCAL/$2.pdf ]
      then
        # ptoribi: adding 2>/dev/null at the end of the command redirects filehandle 2 (STDERR) to /dev/null
        # taken from https://unix.stackexchange.com/questions/192042/how-do-i-suppress-error-messages-from-cp
        evince $SCENARIOS_PATH_LOCAL/$2.pdf 2>/dev/null &
      fi
      
      if [ -e $SCENARIOS_PATH_LOCAL/$2.xml ]
      then
        # --- LAUNCHING SELECTED SCENARIO, XML PARSING ---
        # ptoribi: time will measure how much time takes the commmand to complete
        time read_xml $SCENARIOS_PATH_LOCAL/$2.xml
        echo ""
      else
        # --- LAUNCHING SELECTED SCENARIO, DIRECT FUNCTIONS EXECUTION ---
        # ptoribi: time will measure how much time the commmand takes to complete
        time $SCENARIOS_PATH_LOCAL/$2
        echo ""
      fi
  
    else
      # Display usage message
      echo ""
      error_message "Scenario $2 not found"
      usage_message
    fi
  # Update
  elif [ "$#" -eq 1 ] && [ $1 == "update" ]
  then
    $LIGHTNING_INSTALLATION_PATH/update
  else
    echo ""
    error_message "Command not recognized"
    usage_message
  fi
fi
